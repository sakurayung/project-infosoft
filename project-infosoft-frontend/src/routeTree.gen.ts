/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VideosRouteImport } from './routes/videos'
import { Route as ReportsRouteImport } from './routes/reports'
import { Route as RentalsRouteImport } from './routes/rentals'
import { Route as CustomersRouteImport } from './routes/customers'
import { Route as IndexRouteImport } from './routes/index'

const VideosRoute = VideosRouteImport.update({
  id: '/videos',
  path: '/videos',
  getParentRoute: () => rootRouteImport,
} as any)
const ReportsRoute = ReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRouteImport,
} as any)
const RentalsRoute = RentalsRouteImport.update({
  id: '/rentals',
  path: '/rentals',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomersRoute = CustomersRouteImport.update({
  id: '/customers',
  path: '/customers',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/customers': typeof CustomersRoute
  '/rentals': typeof RentalsRoute
  '/reports': typeof ReportsRoute
  '/videos': typeof VideosRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/customers': typeof CustomersRoute
  '/rentals': typeof RentalsRoute
  '/reports': typeof ReportsRoute
  '/videos': typeof VideosRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/customers': typeof CustomersRoute
  '/rentals': typeof RentalsRoute
  '/reports': typeof ReportsRoute
  '/videos': typeof VideosRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/customers' | '/rentals' | '/reports' | '/videos'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/customers' | '/rentals' | '/reports' | '/videos'
  id: '__root__' | '/' | '/customers' | '/rentals' | '/reports' | '/videos'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CustomersRoute: typeof CustomersRoute
  RentalsRoute: typeof RentalsRoute
  ReportsRoute: typeof ReportsRoute
  VideosRoute: typeof VideosRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/videos': {
      id: '/videos'
      path: '/videos'
      fullPath: '/videos'
      preLoaderRoute: typeof VideosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reports': {
      id: '/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof ReportsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rentals': {
      id: '/rentals'
      path: '/rentals'
      fullPath: '/rentals'
      preLoaderRoute: typeof RentalsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/customers': {
      id: '/customers'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof CustomersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CustomersRoute: CustomersRoute,
  RentalsRoute: RentalsRoute,
  ReportsRoute: ReportsRoute,
  VideosRoute: VideosRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
